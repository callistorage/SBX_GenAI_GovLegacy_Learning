-- Government Benefit Administration Database Queries
-- Legacy SQL for DB2 Mainframe System
-- Last Updated: 2003-11-20

-- Query 1: Retrieve citizen eligibility information
-- Used by COBOL batch processing programs
SELECT 
    CITIZEN_ID,
    LAST_NAME,
    FIRST_NAME,
    DATE_OF_BIRTH,
    SOCIAL_SECURITY_NUMBER,
    ANNUAL_INCOME,
    FAMILY_SIZE,
    EMPLOYMENT_STATUS,
    ADDRESS_LINE_1,
    ADDRESS_LINE_2,
    CITY,
    STATE_CODE,
    ZIP_CODE,
    ELIGIBILITY_STATUS,
    LAST_REVIEWED_DATE
FROM 
    GOVDB.CITIZEN_REGISTRY CR
WHERE 
    CR.ELIGIBILITY_STATUS IN ('ACTIVE', 'PENDING_REVIEW')
    AND CR.LAST_REVIEWED_DATE >= CURRENT_DATE - 365 DAYS
ORDER BY 
    CR.LAST_NAME, CR.FIRST_NAME;

-- Query 2: Calculate benefit amounts by program type
-- Used for monthly benefit calculation reporting
SELECT 
    BA.BENEFIT_PROGRAM_CODE,
    BP.PROGRAM_NAME,
    COUNT(*) AS TOTAL_RECIPIENTS,
    SUM(BA.MONTHLY_BENEFIT_AMOUNT) AS TOTAL_MONTHLY_PAYOUT,
    AVG(BA.MONTHLY_BENEFIT_AMOUNT) AS AVERAGE_BENEFIT,
    MIN(BA.MONTHLY_BENEFIT_AMOUNT) AS MINIMUM_BENEFIT,
    MAX(BA.MONTHLY_BENEFIT_AMOUNT) AS MAXIMUM_BENEFIT
FROM 
    GOVDB.BENEFIT_AWARDS BA
    INNER JOIN GOVDB.BENEFIT_PROGRAMS BP 
        ON BA.BENEFIT_PROGRAM_CODE = BP.PROGRAM_CODE
    INNER JOIN GOVDB.CITIZEN_REGISTRY CR 
        ON BA.CITIZEN_ID = CR.CITIZEN_ID
WHERE 
    BA.AWARD_STATUS = 'ACTIVE'
    AND BA.EFFECTIVE_DATE <= CURRENT_DATE
    AND (BA.END_DATE IS NULL OR BA.END_DATE >= CURRENT_DATE)
    AND CR.ELIGIBILITY_STATUS = 'ACTIVE'
GROUP BY 
    BA.BENEFIT_PROGRAM_CODE,
    BP.PROGRAM_NAME
ORDER BY 
    TOTAL_MONTHLY_PAYOUT DESC;

-- Query 3: Audit trail for benefit application processing
-- Used for compliance reporting and case reviews
SELECT 
    APP.APPLICATION_NUMBER,
    APP.CITIZEN_ID,
    CR.LAST_NAME,
    CR.FIRST_NAME,
    APP.BENEFIT_TYPE,
    APP.STATUS,
    APP.CREATED_DATE,
    APP.LAST_UPDATED,
    AH.ACTION_DATE,
    AH.ACTION_TYPE,
    AH.ACTION_REASON,
    AH.PROCESSED_BY_USER_ID,
    AH.CASE_WORKER_NOTES
FROM 
    GOVDB.BENEFIT_APPLICATIONS APP
    INNER JOIN GOVDB.CITIZEN_REGISTRY CR 
        ON APP.CITIZEN_ID = CR.CITIZEN_ID
    LEFT JOIN GOVDB.APPLICATION_HISTORY AH 
        ON APP.APPLICATION_NUMBER = AH.APPLICATION_NUMBER
WHERE 
    APP.CREATED_DATE >= CURRENT_DATE - 90 DAYS
    AND APP.STATUS IN ('APPROVED', 'DENIED', 'PENDING_REVIEW')
ORDER BY 
    APP.CREATED_DATE DESC,
    AH.ACTION_DATE DESC;

-- Query 4: Data integrity check for orphaned records
-- Used by nightly batch maintenance programs
SELECT 
    'ORPHANED_BENEFITS' AS ISSUE_TYPE,
    COUNT(*) AS RECORD_COUNT,
    'Benefits without valid citizen records' AS DESCRIPTION
FROM 
    GOVDB.BENEFIT_AWARDS BA
WHERE 
    NOT EXISTS (
        SELECT 1 
        FROM GOVDB.CITIZEN_REGISTRY CR 
        WHERE CR.CITIZEN_ID = BA.CITIZEN_ID
    )

UNION ALL

SELECT 
    'ORPHANED_APPLICATIONS' AS ISSUE_TYPE,
    COUNT(*) AS RECORD_COUNT,
    'Applications without valid citizen records' AS DESCRIPTION
FROM 
    GOVDB.BENEFIT_APPLICATIONS APP
WHERE 
    NOT EXISTS (
        SELECT 1 
        FROM GOVDB.CITIZEN_REGISTRY CR 
        WHERE CR.CITIZEN_ID = APP.CITIZEN_ID
    )

UNION ALL

SELECT 
    'MISSING_AUDIT_TRAIL' AS ISSUE_TYPE,
    COUNT(*) AS RECORD_COUNT,
    'Applications without any history records' AS DESCRIPTION
FROM 
    GOVDB.BENEFIT_APPLICATIONS APP
WHERE 
    APP.STATUS != 'DRAFT'
    AND NOT EXISTS (
        SELECT 1 
        FROM GOVDB.APPLICATION_HISTORY AH 
        WHERE AH.APPLICATION_NUMBER = APP.APPLICATION_NUMBER
    );

-- Query 5: Monthly statistical report
-- Used for executive dashboard and federal reporting
WITH MONTHLY_STATS AS (
    SELECT 
        EXTRACT(YEAR FROM BA.EFFECTIVE_DATE) AS AWARD_YEAR,
        EXTRACT(MONTH FROM BA.EFFECTIVE_DATE) AS AWARD_MONTH,
        BA.BENEFIT_PROGRAM_CODE,
        COUNT(*) AS NEW_AWARDS,
        SUM(BA.MONTHLY_BENEFIT_AMOUNT) AS TOTAL_NEW_BENEFITS
    FROM 
        GOVDB.BENEFIT_AWARDS BA
    WHERE 
        BA.EFFECTIVE_DATE >= CURRENT_DATE - 365 DAYS
        AND BA.AWARD_STATUS = 'ACTIVE'
    GROUP BY 
        EXTRACT(YEAR FROM BA.EFFECTIVE_DATE),
        EXTRACT(MONTH FROM BA.EFFECTIVE_DATE),
        BA.BENEFIT_PROGRAM_CODE
)
SELECT 
    MS.AWARD_YEAR,
    MS.AWARD_MONTH,
    MS.BENEFIT_PROGRAM_CODE,
    BP.PROGRAM_NAME,
    MS.NEW_AWARDS,
    MS.TOTAL_NEW_BENEFITS,
    LAG(MS.NEW_AWARDS, 1) OVER (
        PARTITION BY MS.BENEFIT_PROGRAM_CODE 
        ORDER BY MS.AWARD_YEAR, MS.AWARD_MONTH
    ) AS PREVIOUS_MONTH_AWARDS,
    CASE 
        WHEN LAG(MS.NEW_AWARDS, 1) OVER (
            PARTITION BY MS.BENEFIT_PROGRAM_CODE 
            ORDER BY MS.AWARD_YEAR, MS.AWARD_MONTH
        ) > 0 THEN
            ROUND(
                ((MS.NEW_AWARDS - LAG(MS.NEW_AWARDS, 1) OVER (
                    PARTITION BY MS.BENEFIT_PROGRAM_CODE 
                    ORDER BY MS.AWARD_YEAR, MS.AWARD_MONTH
                )) * 100.0) / LAG(MS.NEW_AWARDS, 1) OVER (
                    PARTITION BY MS.BENEFIT_PROGRAM_CODE 
                    ORDER BY MS.AWARD_YEAR, MS.AWARD_MONTH
                ), 2
            )
        ELSE NULL 
    END AS PERCENT_CHANGE
FROM 
    MONTHLY_STATS MS
    INNER JOIN GOVDB.BENEFIT_PROGRAMS BP 
        ON MS.BENEFIT_PROGRAM_CODE = BP.PROGRAM_CODE
ORDER BY 
    MS.AWARD_YEAR DESC, 
    MS.AWARD_MONTH DESC, 
    MS.TOTAL_NEW_BENEFITS DESC;
